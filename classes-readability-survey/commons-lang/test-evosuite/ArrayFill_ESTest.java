/*
 * This file was automatically generated by EvoSuite
 * Fri Apr 26 12:47:22 GMT 2024
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import org.apache.commons.lang3.ArrayFill;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class ArrayFill_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      short[] shortArray0 = new short[0];
      short[] shortArray1 = ArrayFill.fill(shortArray0, (short)0);
      assertEquals(0, shortArray1.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Object[] objectArray0 = new Object[0];
      Object object0 = new Object();
      Object[] objectArray1 = ArrayFill.fill(objectArray0, object0);
      assertEquals(0, objectArray1.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long[] longArray0 = new long[1];
      long[] longArray1 = ArrayFill.fill(longArray0, (long) (byte)33);
      assertArrayEquals(new long[] {33L}, longArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[0];
      int[] intArray1 = ArrayFill.fill(intArray0, 1608);
      assertEquals(0, intArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[] floatArray0 = new float[0];
      float[] floatArray1 = ArrayFill.fill(floatArray0, (-1.0F));
      assertSame(floatArray0, floatArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = ArrayFill.fill(doubleArray0, 0.0);
      assertSame(doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      char[] charArray0 = new char[0];
      char[] charArray1 = ArrayFill.fill(charArray0, 'E');
      assertEquals(0, charArray1.length);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      byte[] byteArray1 = ArrayFill.fill(byteArray0, (byte)33);
      assertEquals(0, byteArray1.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object[] objectArray1 = ArrayFill.fill(objectArray0, objectArray0[5]);
      assertSame(objectArray0, objectArray1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = ArrayFill.fill((String[]) null, "I");
      assertNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      short[] shortArray0 = new short[11];
      short[] shortArray1 = ArrayFill.fill(shortArray0, (short)0);
      assertSame(shortArray0, shortArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      short[] shortArray0 = ArrayFill.fill((short[]) null, (short)1445);
      assertNull(shortArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      long[] longArray0 = new long[0];
      long[] longArray1 = ArrayFill.fill(longArray0, (long) (byte) (-128));
      assertArrayEquals(new long[] {}, longArray1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      long[] longArray0 = ArrayFill.fill((long[]) null, (long) '\u0086');
      assertNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[3];
      int[] intArray1 = ArrayFill.fill(intArray0, (-384));
      assertArrayEquals(new int[] {(-384), (-384), (-384)}, intArray1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = ArrayFill.fill((int[]) null, 14);
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[] floatArray0 = new float[4];
      float[] floatArray1 = ArrayFill.fill(floatArray0, (float) '\u0086');
      assertArrayEquals(new float[] {134.0F, 134.0F, 134.0F, 134.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float[] floatArray0 = ArrayFill.fill((float[]) null, 0.0F);
      assertNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = ArrayFill.fill(doubleArray0, 0.0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = ArrayFill.fill((double[]) null, (double) (short)0);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      char[] charArray0 = new char[3];
      char[] charArray1 = ArrayFill.fill(charArray0, '\u0000');
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000'}, charArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = ArrayFill.fill((char[]) null, '\u0086');
      assertNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byte[] byteArray1 = ArrayFill.fill(byteArray0, (byte) (-9));
      assertArrayEquals(new byte[] {(byte) (-9), (byte) (-9), (byte) (-9), (byte) (-9), (byte) (-9), (byte) (-9), (byte) (-9), (byte) (-9), (byte) (-9)}, byteArray1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = ArrayFill.fill((byte[]) null, (byte)75);
      assertNull(byteArray0);
  }
}
