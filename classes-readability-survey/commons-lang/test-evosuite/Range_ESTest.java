/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 30 11:53:29 GMT 2024
 */

package org.apache.commons.lang3;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.IllegalFormatConversionException;
import java.util.MissingFormatWidthException;
import java.util.UnknownFormatConversionException;
import org.apache.commons.lang3.Range;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

public class Range_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range<String> range0 = Range.between("P:$x@`1(/", "");
      boolean boolean0 = range0.isStartedBy("P:$x@`1(/");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range<String> range0 = Range.is("", (Comparator<String>) null);
      boolean boolean0 = range0.isEndedBy("org.apache.commons.lang3.Range");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparable0).compareTo(any());
      doReturn("", "").when(comparable0).toString();
      Range<Comparable<Object>> range0 = Range.is(comparable0);
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(540, (-1)).when(comparator0).compare(any() , any());
      Range<Object> range1 = new Range<Object>(object0, range0, comparator0);
      Object object1 = range1.getMaximum();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(540).when(comparator1).compare(any() , any());
      Range<Object> range2 = Range.of((Object) object1, (Object) range1, comparator1);
      boolean boolean0 = range1.isBeforeRange(range2);
      assertFalse(range2.equals((Object)range1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-1), (-1)).when(comparable0).compareTo(any());
      doReturn("", "").when(comparable0).toString();
      Range<Comparable<Object>> range0 = Range.is(comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(540).when(comparable1).compareTo(any());
      doReturn("DS%+7Ato(RX`P", "").when(comparable1).toString();
      Range<Comparable<Object>> range1 = Range.between(comparable1, comparable1);
      boolean boolean0 = range1.isAfterRange(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-2421));
      Range<Integer> range0 = Range.of(integer0, integer0);
      Integer integer1 = Integer.valueOf(172);
      Range<Integer> range1 = Range.is(integer1);
      boolean boolean0 = range1.containsRange(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      Comparator<Comparable<Object>> comparator0 = (Comparator<Comparable<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(nullable(Comparable.class) , nullable(Comparable.class));
      Range<Comparable<Object>> range0 = new Range<Comparable<Object>>(comparable0, comparable0, comparator0);
      String string0 = range0.toString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1417), 2698).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("element1", comparator0);
      boolean boolean0 = range0.isBeforeRange(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range<String> range0 = Range.of("AN;1(at3 ", "");
      // Undeclared exception!
      try { 
        range0.toString("#XY%vf");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'v'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range<String> range0 = Range.between("", "y+iD7<8gjGWLyo", (Comparator<String>) null);
      // Undeclared exception!
      try { 
        range0.toString("H%-bYAuKizno!)");
        fail("Expecting exception: MissingFormatWidthException");
      
      } catch(MissingFormatWidthException e) {
         //
         // %-b
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range<String> range0 = Range.of("", "");
      // Undeclared exception!
      try { 
        range0.toString("UFj%fbJo0&j/J|n");
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // f != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Range<String> range0 = Range.between("", "");
      // Undeclared exception!
      try { 
        range0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.of((Object) "", (Object) null, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // element2
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range<String> range0 = Range.of("element1", "element1");
      // Undeclared exception!
      try { 
        Range.of(range0, range0, (Comparator<Range<String>>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.of("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // element2
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(24);
      Range<Integer> range0 = Range.between(integer0, integer0);
      Range<Object> range1 = new Range<Object>("", "", (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range1.isStartedBy(range0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Comparator<Comparable<Integer>> comparator0 = (Comparator<Comparable<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.is((Comparable<Integer>) null, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // element1
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      // Undeclared exception!
      try { 
        Range.is(range0, (Comparator<Range<Integer>>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.is((Comparable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // element1
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range<String> range0 = Range.is("INSTANCE");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.of((Object) "WjD!G", (Object) range0, comparator0);
      Range<Object> range2 = Range.is((Object) "/~r'qcbgsx", (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range1.intersectionWith(range2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Range<Integer> range0 = Range.between(integer0, integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range1 = new Range<Object>(integer0, range0, comparator0);
      // Undeclared exception!
      try { 
        range1.fit((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // element
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Range<Object> range0 = Range.is((Object) "", (Comparator<Object>) null);
      Integer integer0 = new Integer(37);
      // Undeclared exception!
      try { 
        range0.fit(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      doReturn((String) null, (String) null).when(comparable0).toString();
      Range<Comparable<Object>> range0 = Range.between(comparable0, comparable0);
      // Undeclared exception!
      try { 
        range0.elementCompareTo((Comparable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // element
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.between((Object) null, (Object) integer0, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // element1
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(1950);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.of(integer0, integer0, comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.is((Object) range0, comparator1);
      // Undeclared exception!
      try { 
        Range.between(range1, range1, (Comparator<Range<Object>>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.between((Comparable<Object>) null, (Comparable<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // element1
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Range<Integer> range0 = null;
      try {
        range0 = new Range<Integer>(integer0, (Integer) null, comparator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // element2
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Range<String> range0 = Range.is("HHp#IG^9?No'LVy[R");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.is((Object) range0, comparator0);
      Range<Range<Object>> range2 = null;
      try {
        range2 = new Range<Range<Object>>(range1, range1, (Comparator<Range<Object>>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.lang3.Range cannot be cast to java.lang.Comparable
         //
         verifyException("org.apache.commons.lang3.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = new Range<Object>("element", "element", comparator0);
      String string0 = range0.toString();
      assertEquals("[element..element]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range<String> range0 = Range.of("..", "dqa>", (Comparator<String>) null);
      Range<String> range1 = Range.of("dqa>", "dqa>");
      Range<String> range2 = range0.intersectionWith(range1);
      Range<String> range3 = Range.is("..", (Comparator<String>) null);
      boolean boolean0 = range2.isOverlappedBy(range3);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Range<String> range0 = Range.between("", "y+iD7<8gjGWLyo", (Comparator<String>) null);
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.of("5rS t#6@+n>N6&", ",uOHR!0%Y14Zea", comparator0);
      boolean boolean0 = range0.isOverlappedBy(range1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.of(integer0, integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.is((Object) range0, comparator0);
      Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator1).compare(nullable(Range.class) , nullable(Range.class));
      Range<Range<Object>> range2 = new Range<Range<Object>>(range1, range1, comparator1);
      boolean boolean0 = range2.isOverlappedBy(range2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.of(integer0, integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.is((Object) range0, comparator0);
      Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3719), 672, 2023, 0, 0).when(comparator1).compare(nullable(Range.class) , nullable(Range.class));
      Range<Range<Object>> range2 = new Range<Range<Object>>(range1, range1, comparator1);
      boolean boolean0 = range2.isOverlappedBy(range2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Integer integer0 = new Integer(1840);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = new Range<Integer>(integer0, integer0, comparator0);
      boolean boolean0 = range0.isOverlappedBy((Range<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range<String> range0 = Range.between("S^KJ{!=WQ", "S^KJ{!=WQ");
      boolean boolean0 = range0.isBefore("l^<Wn.U(N/#KNiD[?i");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range<String> range0 = Range.between("\"sPY'Ga9pS", "\"sPY'Ga9pS");
      boolean boolean0 = range0.isBefore("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable0).compareTo(any());
      doReturn((String) null, (String) null).when(comparable0).toString();
      Range<Comparable<Object>> range0 = Range.between(comparable0, comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparable1).compareTo(any());
      boolean boolean0 = range0.isAfter(comparable1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-28)).when(comparable0).compareTo(any());
      doReturn("LvJu1V%t", "").when(comparable0).toString();
      Range<Comparable<Object>> range0 = Range.between(comparable0, comparable0);
      Comparable<Object> comparable1 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((-3719)).when(comparable1).compareTo(any());
      boolean boolean0 = range0.isAfter(comparable1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator1).toString();
      doReturn(0, 0, 0, 0).when(comparator1).compare(any() , any());
      Range<Object> range0 = Range.is((Object) comparator0, comparator1);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator2).compare(any() , any());
      Range<Object> range1 = Range.between((Object) "[", (Object) "[", comparator2);
      Range<Object> range2 = range0.intersectionWith(range1);
      boolean boolean0 = range0.equals(range2);
      assertFalse(boolean0);
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "", comparator0);
      Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator1).toString();
      doReturn(0, 0).when(comparator1).compare(nullable(Range.class) , nullable(Range.class));
      Range<Range<Object>> range1 = new Range<Range<Object>>(range0, range0, comparator1);
      Comparator<Range<Object>> comparator2 = range1.getComparator();
      Range<Range<Object>> range2 = Range.is(range0, comparator2);
      boolean boolean0 = range2.equals(range1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.of(integer0, integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.is((Object) range0, comparator0);
      Range<String> range2 = Range.between("\"sPY'Ga9pS", "\"sPY'Ga9pS");
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-8), (-8)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "Yg}$", comparator0);
      boolean boolean0 = range0.contains("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Range<String> range0 = Range.between("", "INSTANCE");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.between("", "", comparator0);
      boolean boolean0 = range1.contains("#r2'S]IIhFr+r[;VA");
      assertFalse(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Range<String> range0 = Range.between("8q-S'u7,{n&sZMZfF", "rVUk*G");
      String string0 = range0.toString();
      assertNotNull(string0);
      assertEquals("[8q-S'u7,{n&sZMZfF..rVUk*G]", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3695), (-3517)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.of(object0, object0, comparator0);
      boolean boolean0 = range0.isStartedBy(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, ":{Qnl<e p\"`CzI~").when(comparable0).toString();
      Comparator<Comparable<Object>> comparator0 = (Comparator<Comparable<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparator0).compare(nullable(Comparable.class) , nullable(Comparable.class));
      Range<Comparable<Object>> range0 = Range.between(comparable0, comparable0, comparator0);
      boolean boolean0 = range0.isStartedBy((Comparable<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Range<Integer> range0 = Range.is(integer0);
      boolean boolean0 = range0.isStartedBy(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, ":{Qnl<e p\"`CzI~").when(comparable0).toString();
      Comparator<Comparable<Object>> comparator0 = (Comparator<Comparable<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparator0).compare(nullable(Comparable.class) , nullable(Comparable.class));
      Range<Comparable<Object>> range0 = Range.between(comparable0, comparable0, comparator0);
      // Undeclared exception!
      try { 
        range0.intersectionWith((Range<Comparable<Object>>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot calculate intersection with non-overlapping range null
         //
         verifyException("org.apache.commons.lang3.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range<String> range0 = Range.between("&k&2Sp.5.V", "A]>ondc>");
      boolean boolean0 = range0.isNaturalOrdering();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Integer integer0 = new Integer((-920));
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(59).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      boolean boolean0 = range0.isNaturalOrdering();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range<String> range0 = Range.between("", "INSTANCE");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.between("", "", comparator0);
      boolean boolean0 = range1.isEndedBy("");
      assertTrue(boolean0);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, ":{Qnl<e p\"`CzI~").when(comparable0).toString();
      Comparator<Comparable<Object>> comparator0 = (Comparator<Comparable<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparator0).compare(nullable(Comparable.class) , nullable(Comparable.class));
      Range<Comparable<Object>> range0 = Range.between(comparable0, comparable0, comparator0);
      boolean boolean0 = range0.isEndedBy((Comparable<Object>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range<String> range0 = Range.between("", "INSTANCE");
      boolean boolean0 = range0.isEndedBy("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(1346).when(comparable0).compareTo(any());
      doReturn("mR>&Scza", "mR>&Scza").when(comparable0).toString();
      Range<Comparable<Object>> range0 = Range.is(comparable0);
      boolean boolean0 = range0.isBeforeRange((Range<Comparable<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.of(object0, object0, comparator0);
      Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(nullable(Range.class) , nullable(Range.class));
      Range<Range<Object>> range1 = new Range<Range<Object>>(range0, range0, comparator1);
      boolean boolean0 = range1.isBeforeRange(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", 0);
      Range<Integer> range0 = Range.is(integer0);
      boolean boolean0 = range0.isBefore((Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Comparable<Object> comparable0 = (Comparable<Object>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn(1346).when(comparable0).compareTo(any());
      doReturn("mR>&Scza", "mR>&Scza").when(comparable0).toString();
      Range<Comparable<Object>> range0 = Range.is(comparable0);
      boolean boolean0 = range0.isAfterRange((Range<Comparable<Object>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Range<String> range0 = Range.between("", "INSTANCE");
      boolean boolean0 = range0.isAfterRange(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = Integer.getInteger("", 0);
      Range<Integer> range0 = Range.is(integer0);
      boolean boolean0 = range0.isAfter((Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Range<String> range0 = Range.between("", "y+iD7<8gjGWLyo", (Comparator<String>) null);
      Range<String> range1 = Range.of("5rS t#6@+n>N6&", "H%-bYAuKizno!)");
      Range<String> range2 = range0.intersectionWith(range1);
      assertTrue(range2.equals((Object)range1));
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) "[0..0]", (Object) integer0, comparator0);
      range0.hashCode();
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range<String> range0 = Range.between("", "INSTANCE");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.between("", "", comparator0);
      String string0 = range1.fit("#r2'S]IIhFr+r[;VA");
      assertFalse(range1.equals((Object)range0));
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range<String> range0 = Range.between("8q-S'u7,{n&sZMZfF", "rVUk*G");
      String string0 = range0.fit("");
      assertEquals("8q-S'u7,{n&sZMZfF", string0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Range<String> range0 = Range.between("", "INSTANCE");
      String string0 = range0.fit("#r2'S]IIhFr+r[;VA");
      assertEquals("#r2'S]IIhFr+r[;VA", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.of(integer0, integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.is((Object) range0, comparator0);
      Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3719)).when(comparator1).compare(nullable(Range.class) , nullable(Range.class));
      Range<Range<Object>> range2 = new Range<Range<Object>>(range1, range1, comparator1);
      Comparator<Range<Object>> comparator2 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(1, 672, 2, 1, 0).when(comparator2).compare(nullable(Range.class) , nullable(Range.class));
      Range<Range<Object>> range3 = Range.of(range1, range1, comparator2);
      Range<Range<Object>> range4 = range2.intersectionWith(range3);
      assertSame(range4, range2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Range<String> range0 = Range.between("", "INSTANCE");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.between("", "", comparator0);
      Range<String> range2 = range1.intersectionWith(range0);
      assertTrue(range2.equals((Object)range1));
      assertNotSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range<String> range0 = Range.between("8q-S'u7,{n&sZMZfF", "rVUk*G");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(8, 8, 8, 8, (-920)).when(comparator0).compare(anyString() , anyString());
      Range<String> range1 = Range.of("7", "", comparator0);
      Range<String> range2 = range0.intersectionWith(range1);
      assertFalse(range2.equals((Object)range1));
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range<String> range0 = Range.is("g6,o#BC;|kuw;+|vI");
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Range<String> range0 = Range.is("");
      boolean boolean0 = range0.equals("[java.lang.Object@1f7f5fcd..java.lang.Object@1f7f5fcd]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Range<String> range0 = Range.between("", "INSTANCE");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.between("", "", comparator0);
      int int0 = range1.elementCompareTo("#r2'S]IIhFr+r[;VA");
      assertFalse(range1.equals((Object)range0));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-3695), (-3517)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.of(object0, object0, comparator0);
      Integer integer0 = new Integer(0);
      int int0 = range0.elementCompareTo(integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.of(object0, object0, comparator0);
      Integer integer0 = new Integer(0);
      int int0 = range0.elementCompareTo(integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range<String> range0 = Range.is("");
      Range<String> range1 = Range.of("[java.lang.Object@1f7f5fcd..java.lang.Object@1f7f5fcd]", "");
      boolean boolean0 = range0.containsRange(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Range<String> range0 = Range.of("AN;1(at3 ", "");
      Comparator<Range<String>> comparator0 = (Comparator<Range<String>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(nullable(Range.class) , nullable(Range.class));
      Range<Range<String>> range1 = Range.between(range0, range0, comparator0);
      boolean boolean0 = range1.containsRange((Range<Range<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Range<String> range0 = Range.between("8q-S'u7,{n&sZMZfF", "rVUk*G");
      boolean boolean0 = range0.containsRange(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Comparable<Range<String>> comparable0 = (Comparable<Range<String>>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("").when(comparable0).toString();
      Comparable<Range<String>> comparable1 = (Comparable<Range<String>>) mock(Comparable.class, new ViolatedAssumptionAnswer());
      doReturn("2YM4Q=}").when(comparable1).toString();
      Comparator<Comparable<Range<String>>> comparator0 = (Comparator<Comparable<Range<String>>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(24).when(comparator0).compare(nullable(Comparable.class) , nullable(Comparable.class));
      Range<Comparable<Range<String>>> range0 = Range.of(comparable0, comparable1, comparator0);
      boolean boolean0 = range0.contains((Comparable<Range<String>>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.of(integer0, integer0);
      boolean boolean0 = range0.contains(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.of(integer0, integer0);
      Integer integer1 = range0.getMinimum();
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Integer integer0 = new Integer(3936);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.of((Object) integer0, (Object) integer0, comparator0);
      range0.toString("fI77pSG*>;@a-rfP0:E");
      assertFalse(range0.isNaturalOrdering());
  }
}
