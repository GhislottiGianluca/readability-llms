/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 30 12:18:48 GMT 2024
 */

package org.jfree.data.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

public class BoxAndWhiskerItem_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, linkedList0);
      Number number0 = boxAndWhiskerItem0.getQ3();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 0.0, 1342.66551, 0.0, 0.0, 1342.66551, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getQ3();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Double double0 = new Double(1415.310383387435);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getQ3();
      assertEquals(1415.310383387435, number0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, linkedList0);
      Number number0 = boxAndWhiskerItem0.getQ1();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Float float0 = new Float((-1458.0F));
      Double double0 = new Double((-1458.0F));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) float0, (Number) float0, (Number) float0, (Number) float0, (Number) double0, (Number) float0, (Number) float0, (Number) double0, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getQ1();
      assertEquals((-1458.0F), number0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Long long0 = new Long(1938L);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) long0, (Number) long0, (Number) long0, (Number) long0, (Number) long0, (Number) long0, (Number) long0, (Number) long0, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getQ1();
      assertEquals(1938L, number0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, linkedList0);
      Number number0 = boxAndWhiskerItem0.getMinRegularValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-929));
      Short short0 = new Short((short) (-1508));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMinRegularValue();
      assertEquals((short) (-1508), number0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Long long0 = new Long(1938L);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) long0, (Number) long0, (Number) long0, (Number) long0, (Number) long0, (Number) long0, (Number) long0, (Number) long0, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMinRegularValue();
      assertEquals(1938L, number0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, linkedList0);
      Number number0 = boxAndWhiskerItem0.getMinOutlier();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-929));
      Short short0 = new Short((short) (-1508));
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) short0, (Number) short0, (Number) short0, (Number) short0, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMinOutlier();
      assertEquals((short) (-1508), number0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer(2478);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMinOutlier();
      assertEquals(2478, number0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, linkedList0);
      Number number0 = boxAndWhiskerItem0.getMedian();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 1137.88348567337, 0.0, 750.6765296, 1.0, 750.6765296, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMedian();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(2478);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMedian();
      assertEquals(2478, number0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, linkedList0);
      Number number0 = boxAndWhiskerItem0.getMean();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Double double0 = new Double(0.0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (Number) double0, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMean();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Long long0 = new Long(168L);
      Integer integer0 = new Integer(102);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) long0, (Number) long0, (Number) long0, (Number) long0, (Number) long0, (Number) integer0, (Number) integer0, (Number) long0, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMean();
      assertEquals(168L, number0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (List<? extends Number>) null);
      Number number0 = boxAndWhiskerItem0.getMaxRegularValue();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMaxRegularValue();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, (-1.0), 0.0, 837.41307, 0.0, (-2805.37853882542), (-1.0), 1914.83, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMaxRegularValue();
      assertEquals((-2805.37853882542), number0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (Number) null, (List<? extends Number>) null);
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertNull(number0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-3328.935244466), (-2342.57934), (-2342.57934), 0.0, (-3328.935244466), (-2342.57934), 0.0, 0.0, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(2478);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertEquals(2478, number0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = Integer.valueOf(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add(integer0);
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List<? extends Number>) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List<? extends Number>) linkedList1);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(2478.349609494, 2478.349609494, 2478.349609494, 2478.349609494, 2478.349609494, 2478.349609494, 2478.349609494, 2478.349609494, (List<? extends Number>) linkedList0);
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(2478.349609494, 2478.349609494, 2478.349609494, 2478.349609494, 2478.349609494, 2478.349609494, 2478.349609494, (-1.0), (List<? extends Number>) linkedList0);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Integer integer0 = new Integer((-392));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List<? extends Number>) linkedList0);
      Byte byte0 = new Byte((byte) (-5));
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) byte0, (Number) integer0, (List<? extends Number>) linkedList0);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(17.0425219833334, 17.0425219833334, 17.0425219833334, 17.0425219833334, 17.0425219833334, 17.0425219833334, 17.0425219833334, 17.0425219833334, (List<? extends Number>) linkedList0);
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(17.0425219833334, 17.0425219833334, 17.0425219833334, 17.0425219833334, 17.0425219833334, (-796.5665952005778), (-796.5665952005778), 17.0425219833334, (List<? extends Number>) linkedList0);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 0.0, 0.0, (-6191.080435), (-6191.080435), 0.0, (List<? extends Number>) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 0.0, (-6191.080435), 0.0, 0.0, 0.0, (List<? extends Number>) linkedList1);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (-1.0), (List<? extends Number>) linkedList0);
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((-1.0), (-1.0), (-1.0), 0.0, (-1.0), (-1.0), (-1.0), (-1.0), (List<? extends Number>) linkedList0);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-3.62699177440717), (-3.62699177440717), (-3.62699177440717), (-3.62699177440717), (-3.62699177440717), (-3.62699177440717), (-3.62699177440717), (-3.62699177440717), (List<? extends Number>) linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((-3.62699177440717), (-3.62699177440717), 2047.20716, (-3.62699177440717), (-3.62699177440717), (-3.62699177440717), (-3.62699177440717), (-3.62699177440717), (List<? extends Number>) linkedList1);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = linkedList0.pollLast();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1212.67), (-1212.67), (-1212.67), (-1212.67), (-1212.67), (-1212.67), (-1212.67), (-1212.67), (List<? extends Number>) linkedList0);
      Double double1 = (Double)boxAndWhiskerItem0.getMedian();
      Float float0 = new Float((-1212.67));
      Short short0 = new Short((short)0);
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((Number) double1, (Number) null, (Number) double0, (Number) float0, (Number) float0, (Number) short0, (Number) double0, (Number) float0, (List<? extends Number>) linkedList0);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-4575.1104850533), (-1.662934244393552), (-4575.1104850533), (-4575.1104850533), (-1.662934244393552), (-4575.1104850533), (-4575.1104850533), (-1.662934244393552), (List<? extends Number>) linkedList0);
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((-1.662934244393552), (-4575.1104850533), (-1.662934244393552), (-1.662934244393552), (-4575.1104850533), (-4575.1104850533), (-4575.1104850533), (-4575.1104850533), (List<? extends Number>) linkedList0);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Integer integer0 = Integer.valueOf(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List<? extends Number>) linkedList0);
      BoxAndWhiskerItem boxAndWhiskerItem1 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List<? extends Number>) linkedList0);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-900.368069), (-900.368069), (-900.368069), (-900.368069), (-900.368069), (-900.368069), (-900.368069), (-900.368069), (List<? extends Number>) linkedList0);
      boolean boolean0 = boxAndWhiskerItem0.equals(boxAndWhiskerItem0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Integer integer0 = Integer.valueOf(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List<? extends Number>) linkedList0);
      boolean boolean0 = boxAndWhiskerItem0.equals(linkedList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (List<? extends Number>) null);
      List<Number> list0 = boxAndWhiskerItem0.getOutliers();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer integer0 = Integer.valueOf(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List<? extends Number>) linkedList0);
      List<Number> list0 = boxAndWhiskerItem0.getOutliers();
      assertFalse(list0.contains(0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1212.67), (-1212.67), (-1212.67), (-1212.67), (-1212.67), (-1212.67), (-1212.67), (-1212.67), (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getQ3();
      assertEquals((-1212.67), number0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (List<? extends Number>) null);
      Number number0 = boxAndWhiskerItem0.getMinOutlier();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (List<? extends Number>) null);
      Number number0 = boxAndWhiskerItem0.getMinRegularValue();
      assertEquals(0.0, number0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1212.67), (-1212.67), (-1212.67), (-1212.67), (-1212.67), (-1212.67), (-1212.67), (-1212.67), (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMean();
      assertEquals((-1212.67), number0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((-1212.67), (-1212.67), (-1212.67), (-1212.67), (-1212.67), (-1212.67), (-1212.67), (-1212.67), (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMaxOutlier();
      assertFalse(linkedList0.contains(number0));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(2478.349609494, 2478.349609494, 2478.349609494, 2478.349609494, 2478.349609494, 2478.349609494, 2478.349609494, 2478.349609494, (List<? extends Number>) linkedList0);
      Number number0 = boxAndWhiskerItem0.getMaxRegularValue();
      assertEquals(2478.349609494, number0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Integer integer0 = Integer.valueOf(0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem((Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (Number) integer0, (List<? extends Number>) linkedList0);
      String string0 = boxAndWhiskerItem0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BoxAndWhiskerItem boxAndWhiskerItem0 = new BoxAndWhiskerItem(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, (List<? extends Number>) null);
      Number number0 = boxAndWhiskerItem0.getQ1();
      assertEquals(0.0, number0);
  }
}
