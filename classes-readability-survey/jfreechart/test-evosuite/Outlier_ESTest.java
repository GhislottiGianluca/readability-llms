/*
 * This file was automatically generated by EvoSuite
 * Tue Apr 30 12:17:23 GMT 2024
 */

package org.jfree.chart.renderer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.geom.Point2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.renderer.Outlier;
import org.junit.runner.RunWith;

public class Outlier_ESTest {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, 0.0);
      Outlier outlier1 = new Outlier(0.0, 0.0, 0.0);
      outlier1.setRadius((-2403.7117F));
      boolean boolean0 = outlier1.equals(outlier0);
      assertEquals((-2403.711669921875), outlier1.getRadius(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, 0.0);
      boolean boolean0 = outlier0.overlaps(outlier0);
      assertEquals(0.0, outlier0.getX(), 0.01);
      assertEquals(0.0, outlier0.getRadius(), 0.01);
      assertEquals(0.0, outlier0.getY(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Outlier outlier0 = new Outlier(1.0, (-622.62), (-569.5109496));
      assertEquals(570.5109496, outlier0.getX(), 0.01);
      
      Point2D.Double point2D_Double0 = new Point2D.Double();
      outlier0.setPoint(point2D_Double0);
      Outlier outlier1 = new Outlier((-622.62), 0.0, 0.0);
      int int0 = outlier0.compareTo(outlier1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1063.769739825398), 465.65776458, (-1063.769739825398));
      Outlier outlier1 = new Outlier(1.0, 465.65776458, (-408.76753357817));
      Point2D.Float point2D_Float0 = new Point2D.Float();
      Point2D point2D0 = outlier1.getPoint();
      point2D_Float0.setLocation(point2D0);
      outlier0.setPoint(point2D_Float0);
      int int0 = outlier0.compareTo(outlier1);
      assertEquals(409.7675476074219, outlier0.getX(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1532.010111531), (-1532.010111531), 1.1);
      assertEquals((-1533.1101115309998), outlier0.getY(), 0.01);
      
      Point2D.Float point2D_Float0 = new Point2D.Float();
      outlier0.setPoint(point2D_Float0);
      outlier0.getY();
      assertEquals(1.1, outlier0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, (-675.0));
      double double0 = outlier0.getY();
      assertEquals(675.0, outlier0.getX(), 0.01);
      assertEquals(675.0, double0, 0.01);
      assertEquals((-675.0), outlier0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1063.769739825398), 465.65776458, (-1063.769739825398));
      Outlier outlier1 = new Outlier(1.0, 465.65776458, (-408.76753357817));
      Point2D.Float point2D_Float0 = new Point2D.Float();
      Point2D point2D0 = outlier1.getPoint();
      point2D_Float0.setLocation(point2D0);
      outlier0.setPoint(point2D_Float0);
      double double0 = outlier0.getX();
      assertEquals(409.7675476074219, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, 180.95221368);
      double double0 = outlier0.getX();
      assertEquals((-180.95221368), double0, 0.01);
      assertEquals((-180.95221368), outlier0.getY(), 0.01);
      assertEquals(180.95221368, outlier0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, 0.0);
      double double0 = outlier0.getRadius();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, outlier0.getY(), 0.01);
      assertEquals(0.0, outlier0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1063.769739825398), 465.65776458, (-1063.769739825398));
      double double0 = outlier0.getRadius();
      assertEquals(0.0, outlier0.getX(), 0.01);
      assertEquals((-1063.769739825398), double0, 0.01);
      assertEquals(1529.427504405398, outlier0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Outlier outlier0 = new Outlier(1.0, 1.0, 0.0);
      assertEquals(1.0, outlier0.getY(), 0.01);
      assertEquals(1.0, outlier0.getX(), 0.01);
      
      outlier0.setPoint((Point2D) null);
      outlier0.getPoint();
      assertEquals(0.0, outlier0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, 0.0);
      outlier0.setPoint((Point2D) null);
      // Undeclared exception!
      try { 
        outlier0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.Outlier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Outlier outlier0 = new Outlier((-170.41679570699662), (-170.41679570699662), 1870.67501298182);
      // Undeclared exception!
      try { 
        outlier0.overlaps((Outlier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.Outlier", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Outlier outlier0 = new Outlier((-940.161947366952), 771.37815, (-3439.70865));
      outlier0.setPoint((Point2D) null);
      // Undeclared exception!
      try { 
        outlier0.getY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.Outlier", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Outlier outlier0 = new Outlier(476.06770903886604, 476.06770903886604, (-1.0));
      outlier0.setPoint((Point2D) null);
      // Undeclared exception!
      try { 
        outlier0.getX();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.Outlier", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Outlier outlier0 = new Outlier(1.0, 1.0, 2921.379318502267);
      outlier0.setPoint((Point2D) null);
      Outlier outlier1 = new Outlier(1.0, (-1.0), 1.0);
      // Undeclared exception!
      try { 
        outlier0.equals(outlier1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.Outlier", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Outlier outlier0 = new Outlier(2190.2379, 2190.2379, 1709.4102119246);
      // Undeclared exception!
      try { 
        outlier0.compareTo((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.renderer.Outlier", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, 0.0);
      // Undeclared exception!
      try { 
        outlier0.compareTo("VpZ)&}%GSTcJg{&5");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.jfree.chart.renderer.Outlier
         //
         verifyException("org.jfree.chart.renderer.Outlier", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, 0.0);
      double double0 = outlier0.getX();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, outlier0.getRadius(), 0.01);
      assertEquals(0.0, outlier0.getY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Outlier outlier0 = new Outlier((-170.41679570699662), (-170.41679570699662), 1870.67501298182);
      double double0 = outlier0.getY();
      assertEquals(1870.67501298182, outlier0.getRadius(), 0.01);
      assertEquals((-2041.0918086888166), double0, 0.01);
      assertEquals((-2041.0918086888166), outlier0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1.0), (-1.0), (-1.0));
      Point2D.Float point2D_Float0 = new Point2D.Float();
      Outlier outlier1 = new Outlier((-1.0), 0.0F, 0.0F);
      assertEquals((-1.0), outlier1.getX(), 0.01);
      
      outlier1.setPoint(point2D_Float0);
      boolean boolean0 = outlier1.equals(outlier0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1.0), (-1.0), (-1.0));
      Outlier outlier1 = new Outlier((-1.0), 0.0F, 0.0F);
      boolean boolean0 = outlier0.equals(outlier1);
      assertEquals((-1.0), outlier1.getX(), 0.01);
      assertEquals(0.0, outlier1.getRadius(), 0.01);
      assertEquals(0.0, outlier0.getX(), 0.01);
      assertEquals(0.0, outlier1.getY(), 0.01);
      assertEquals(0.0, outlier0.getY(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Outlier outlier0 = new Outlier(885.44840336496, 885.44840336496, 885.44840336496);
      Outlier outlier1 = new Outlier(885.44840336496, 885.44840336496, 885.44840336496);
      boolean boolean0 = outlier0.equals(outlier1);
      assertEquals(0.0, outlier1.getY(), 0.01);
      assertEquals(0.0, outlier1.getX(), 0.01);
      assertTrue(boolean0);
      assertEquals(885.44840336496, outlier1.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Outlier outlier0 = new Outlier(0.0, 0.0, 0.0);
      boolean boolean0 = outlier0.equals(outlier0);
      assertTrue(boolean0);
      assertEquals(0.0, outlier0.getRadius(), 0.01);
      assertEquals(0.0, outlier0.getY(), 0.01);
      assertEquals(0.0, outlier0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Outlier outlier0 = new Outlier((-170.41679570699662), (-170.41679570699662), 1870.67501298182);
      Point2D.Double point2D_Double0 = (Point2D.Double)outlier0.getPoint();
      boolean boolean0 = outlier0.equals(point2D_Double0);
      assertFalse(boolean0);
      assertEquals((-2041.0918086888166), point2D_Double0.y, 0.01);
      assertEquals(1870.67501298182, outlier0.getRadius(), 0.01);
      assertEquals((-2041.0918086888166), point2D_Double0.x, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Outlier outlier0 = new Outlier(967.8, 967.8, 967.8);
      outlier0.setRadius(0.0);
      Outlier outlier1 = new Outlier(0.0F, 967.8, 0.0F);
      boolean boolean0 = outlier0.overlaps(outlier1);
      assertEquals(0.0, outlier0.getRadius(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Outlier outlier0 = new Outlier(967.8, 967.8, 967.8);
      Outlier outlier1 = new Outlier(0.0F, 967.8, 0.0F);
      boolean boolean0 = outlier1.overlaps(outlier0);
      assertEquals(967.8, outlier1.getY(), 0.01);
      assertEquals(967.8, outlier0.getRadius(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, outlier0.getY(), 0.01);
      assertEquals(0.0, outlier1.getX(), 0.01);
      assertEquals(0.0, outlier0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1840.0), (-369.87212723100106), (-369.87212723100106));
      Outlier outlier1 = new Outlier(0.0, (-1840.0), (-1840.0));
      boolean boolean0 = outlier0.overlaps(outlier1);
      assertEquals((-1840.0), outlier1.getRadius(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, outlier1.getY(), 0.01);
      assertEquals((-1470.127872768999), outlier0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Outlier outlier0 = new Outlier((-1840.0), (-369.87212723100106), (-369.87212723100106));
      boolean boolean0 = outlier0.overlaps(outlier0);
      assertEquals(0.0, outlier0.getY(), 0.01);
      assertEquals((-1470.127872768999), outlier0.getX(), 0.01);
      assertEquals((-369.87212723100106), outlier0.getRadius(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Outlier outlier0 = new Outlier((-2201.61626), 526.735109838321, (-2201.61626));
      Outlier outlier1 = new Outlier(0.0, 0.0, 0.0);
      int int0 = outlier0.compareTo(outlier1);
      assertEquals(0.0, outlier1.getY(), 0.01);
      assertEquals(1, int0);
      assertEquals(0.0, outlier0.getX(), 0.01);
      assertEquals((-2201.61626), outlier0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Outlier outlier0 = new Outlier(1651.5450189716375, 1651.5450189716375, 1651.5450189716375);
      Outlier outlier1 = new Outlier(0.0F, 0.0F, (-1329.9333025422661));
      int int0 = outlier0.compareTo(outlier1);
      assertEquals((-1329.9333025422661), outlier1.getRadius(), 0.01);
      assertEquals(0.0, outlier0.getX(), 0.01);
      assertEquals(0.0, outlier0.getY(), 0.01);
      assertEquals(1329.9333025422661, outlier1.getX(), 0.01);
      assertEquals(1329.9333025422661, outlier1.getY(), 0.01);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Outlier outlier0 = new Outlier((-170.41679570699662), (-170.41679570699662), 1870.67501298182);
      int int0 = outlier0.compareTo(outlier0);
      assertEquals(0, int0);
      assertEquals((-2041.0918086888166), outlier0.getY(), 0.01);
      assertEquals((-2041.0918086888166), outlier0.getX(), 0.01);
      assertEquals(1870.67501298182, outlier0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Outlier outlier0 = new Outlier((-170.41679570699662), (-170.41679570699662), 1870.67501298182);
      String string0 = outlier0.toString();
      assertEquals(1870.67501298182, outlier0.getRadius(), 0.01);
      assertEquals("{-2041.0918086888166,-2041.0918086888166}", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Outlier outlier0 = new Outlier((-170.41679570699662), (-170.41679570699662), 1870.67501298182);
      double double0 = outlier0.getRadius();
      assertEquals(1870.67501298182, double0, 0.01);
      assertEquals((-2041.0918086888166), outlier0.getY(), 0.01);
      assertEquals((-2041.0918086888166), outlier0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Outlier outlier0 = new Outlier((-170.41679570699662), (-170.41679570699662), 1870.67501298182);
      boolean boolean0 = outlier0.overlaps(outlier0);
      assertEquals((-2041.0918086888166), outlier0.getY(), 0.01);
      assertEquals((-2041.0918086888166), outlier0.getX(), 0.01);
      assertTrue(boolean0);
  }
}
